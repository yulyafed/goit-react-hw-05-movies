{"version":3,"file":"static/js/681.54428745.chunk.js","mappings":"6SAEMA,EAAU,mCACVC,EAAW,+BACXC,EAAO,QAEPC,EAAgB,mCAAG,uGAEJC,EAAAA,GAAAA,IAAA,UAAaH,EAAb,uCAAoDD,EAApD,qBAAwEE,IAFpE,wEAIjBG,QAAQC,IAAR,MAJiB,gCAMd,MANc,yDAAH,qDAShBC,EAAiB,mCAAG,WAAOC,GAAP,0FAELJ,EAAAA,GAAAA,IAAA,UAAaH,EAAb,iCAA8CD,EAA9C,qBAAkEE,EAAlE,kBAAgFM,IAF3E,wEAIlBH,QAAQC,IAAR,MAJkB,gCAMf,MANe,yDAAH,sDASjBG,EAAiB,mCAAG,WAAOC,GAAP,0FAELN,EAAAA,GAAAA,IAAA,UAAaH,EAAb,kBAA+BS,EAA/B,oBAAkDV,EAAlD,qBAAsEE,IAFjE,wEAIlBG,QAAQC,IAAR,MAJkB,gCAMf,MANe,yDAAH,sDASjBK,EAAiB,mCAAG,WAAOD,GAAP,0FAELN,EAAAA,GAAAA,IAAA,UAAaH,EAAb,kBAA+BS,EAA/B,4BAA0DV,EAA1D,qBAA8EE,IAFzE,wEAIlBG,QAAQC,IAAR,MAJkB,gCAMf,MANe,yDAAH,sDASjBM,EAAiB,mCAAG,WAAOF,GAAP,0FAELN,EAAAA,GAAAA,IAAA,UAAaH,EAAb,kBAA+BS,EAA/B,4BAA0DV,EAA1D,qBAA8EE,IAFzE,wEAIlBG,QAAQC,IAAR,MAJkB,gCAMf,MANe,yDAAH,qD,8ICtCP,SAASO,IAEtB,OAAwCC,EAAAA,EAAAA,UAAS,CAC/CC,KAAO,CAACC,QAAS,MADnB,eAAOC,EAAP,KAAqBC,EAArB,KAIOR,GAAYS,EAAAA,EAAAA,MAAZT,QAWR,OATEU,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAAkCC,GAAlC,wFACyBT,EAAAA,EAAAA,IAAkBS,GAD3C,OACQC,EADR,OAEEJ,EAAgBI,GAChBjB,QAAQC,IAAIgB,EAASP,MAHvB,4CADc,uBAAC,SAAD,2BAMdQ,CAAmBb,EACpB,GAAE,CAACA,KAIJ,2BACwC,IAArCO,EAAaF,KAAKC,QAAQQ,SACzB,qEAEDP,IACC,wBACGA,EAAaF,KAAKC,QAAQS,KAAI,SAAAC,GAC7B,OACE,2BACE,wBACE,qCAAaA,EAAKC,OAAlB,UAEF,uBAAID,EAAKE,YAJFF,EAAKL,GAOjB,QAKV,C","sources":["ApiService.js","components/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '1a5f55f6d50e6cac082c25ce71739bfe';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst LANG = 'en-US';\n\nconst fetchTrendMovies = async () => {\n    try {\n        return await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}&language=${LANG}`);\n    } catch (err) {\n        console.log(err);\n    }\n    return null;\n};\n\nconst fetchSearchMovies = async (searchMovie) => {\n    try {\n        return await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=${LANG}&query=${searchMovie}`);\n    } catch (err) {\n        console.log(err);\n    }\n    return null;\n};\n\nconst fetchMovieDetails = async (movieId) => {\n    try {\n        return await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=${LANG}`);\n    } catch (err) {\n        console.log(err);\n    }\n    return null;\n};\n\nconst fetchMovieCredits = async (movieId) => {\n    try {\n        return await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=${LANG}`);\n    } catch (err) {\n        console.log(err);\n    }\n    return null;\n};\n\nconst fetchMovieReviews = async (movieId) => {\n    try {\n        return await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=${LANG}`);\n    } catch (err) {\n        console.log(err);\n    }\n    return null;\n};\n\nexport { fetchTrendMovies, fetchSearchMovies, fetchMovieDetails, fetchMovieCredits, fetchMovieReviews };","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'ApiService';\n\n export default function Reviews() {\n\n   const [moviereviews, setMovieReviews] = useState({\n     data:  {results: []} ,\n   });\n\n  const { movieId } = useParams();\n\n    useEffect(() => {\n      async function updateMovieReviews(id) {\n        const response = await fetchMovieReviews(id);\n        setMovieReviews(response);\n        console.log(response.data);\n      }\n      updateMovieReviews(movieId);\n    }, [movieId]);\n\n  return (\n    \n    <div>\n      {moviereviews.data.results.length === 0  && (\n        <p> We don't have any reviews for this movie</p>\n      )}\n      {moviereviews && (\n        <ul>\n          {moviereviews.data.results.map(item => {\n            return (\n              <li key={item.id}>\n                <b>\n                  <p> Author: {item.author} </p>\n                </b>\n                <p>{item.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n"],"names":["API_KEY","BASE_URL","LANG","fetchTrendMovies","axios","console","log","fetchSearchMovies","searchMovie","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","Reviews","useState","data","results","moviereviews","setMovieReviews","useParams","useEffect","id","response","updateMovieReviews","length","map","item","author","content"],"sourceRoot":""}